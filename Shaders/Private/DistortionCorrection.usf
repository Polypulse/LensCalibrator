/*
 * Copyright (C) 2020 - LensCalibrator contributors, see Contributors.txt at the root of the project.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#pragma once

#include "/Engine/Public/Platform.ush"

Texture2D InDistortedTexture;
SamplerState InDistortedTextureSampler;

Texture2D InDistortionCorrectionTexture;
SamplerState InDistortionCorrectionTextureSampler;

int InReverse;

struct InputVS
{
	float4 Position : ATTRIBUTE0;
	float2 UV : ATTRIBUTE1;
};

struct OutputVS
{
	float4	Position : SV_POSITION;
	float4	UV : TEXCOORD0;
};

struct OutputPS
{
	float4 Color : SV_Target0;
};

OutputVS MainVS(InputVS IN)
{
	OutputVS Out;
	
	Out.Position = float4(IN.Position.xy * 2.0 - 1.0, 0, 1);
	Out.UV = float4(IN.UV, 0.0f, 1.0f);

	return Out;
}

OutputPS MainPS(OutputVS IN)
{
	OutputPS Out;

	float2 undistortedUVs = InDistortionCorrectionTexture.Sample(InDistortionCorrectionTextureSampler, IN.UV.xy).rg;

	Out.Color = float4(0.0, 0.0, 0.0, 1.0);
	if (undistortedUVs.x > 0.0 && undistortedUVs.y > 0.0 && undistortedUVs.x < 1.0 && undistortedUVs.y < 1.0)
		Out.Color = InDistortedTexture.Sample(InDistortedTextureSampler, undistortedUVs); 
	return Out;
}