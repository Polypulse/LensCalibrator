/*
 * Copyright (C) 2020 - LensCalibrator contributors, see Contributors.txt at the root of the project.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


#pragma once

#include "/Engine/Public/Platform.ush"

uniform float k1;
uniform float k2;
uniform float p1;
uniform float p2;
uniform float k3;
uniform int InGenerateInverseMap;
uniform float2 InNormalizedPrincipalPoint;

struct InputVS
{
	float4 Position : ATTRIBUTE0;
	float2 UV : ATTRIBUTE1;
};

struct OutputVS
{
	float4	Position : SV_POSITION;
	float4	UV : TEXCOORD0;
};

struct OutputPS
{
	half4 Color : SV_Target0;
};

OutputVS MainVS(InputVS IN)
{
	OutputVS Out;
	
	Out.Position = float4(IN.Position.xy * 2.0 - 1.0, 0, 1);
	Out.UV = float4(IN.UV, 0.0f, 1.0f);

	return Out;
}

OutputPS MainPS(OutputVS IN)
{
	OutputPS Out;

	// float k1, k2, p1, p2, k3;
	// k1 = InDistortionCoefficients[0] * (InGenerateInverseMap == 1 ? -1.0 : 1.0);
	// k2 = InDistortionCoefficients[1] * (InGenerateInverseMap == 1 ? -1.0 : 1.0);
	// p1 = InDistortionCoefficients[2];
	// p2 = InDistortionCoefficients[3];
	// k3 = InDistortionCoefficients[4] * (InGenerateInverseMap == 1 ? -1.0 : 1.0);

	k1 = k1 * (InGenerateInverseMap == 1 ? -1.0 : 1.0);
	k2 = k2 * (InGenerateInverseMap == 1 ? -1.0 : 1.0);
	p1 = p1;
	p2 = p2;
	k3 = k3 * (InGenerateInverseMap == 1 ? -1.0 : 1.0);

	float ppx = InNormalizedPrincipalPoint.x;
	float ppy = InNormalizedPrincipalPoint.y;

	float uvx = IN.UV.x;
	float uvy = IN.UV.y;

	// Out.Color = half4(uvx, uvy, 0.0, 1.0);
	// return Out;

	float cx = (uvx - ppx);
	float cy = (uvy - ppy);

	float r = sqrt(cx * cx + cy * cy);

	half x = uvx + cx * (k1 * pow(r, 2.0) + k2 * pow(r, 4.0) + k3 * pow(r, 6.0))/* + p1 * (pow(r, 2.0) + 2 * pow(cx, 2.0)) + 2 * p2 * (cx * cy)*/;
	half y = uvy + cy * (k1 * pow(r, 2.0) + k2 * pow(r, 4.0) + k3 * pow(r, 6.0))/* + p2 * (pow(r, 2.0) + 2 * pow(cy, 2.0)) + 2 * p1 * (cx * cy)*/;

	// float d = length(float2(ppx, ppy) - IN.UV.xy);
	// Out.Color = float4(d, d, d, 1.0);
	
	// Out.Color = float4(IN.UV.xy, 0.0, 1.0);
	Out.Color = half4(x, y, 0.0, 1.0);
	return Out;
}